{"version":3,"sources":["logo.svg","components/FormView.js","components/Question.js","components/Search.js","components/QuestionView.js","components/Header.js","components/QuizView.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","FormView","props","submitQuestion","event","preventDefault","$","ajax","url","type","dataType","contentType","data","JSON","stringify","question","state","answer","difficulty","category","xhrFields","withCredentials","crossDomain","success","result","document","getElementById","reset","error","alert","handleChange","setState","target","name","value","categories","id","className","onSubmit","this","onChange","Object","keys","map","key","Component","Question","visibleAnswer","src","onClick","questionAction","flipVisibility","style","Search","query","getInfo","submitSearch","handleInputChange","search","placeholder","ref","input","QuestionView","getQuestions","page","questions","totalQuestions","total_questions","currentCategory","current_category","getByCategory","searchTerm","action","window","confirm","num","pageNumbers","maxPage","Math","ceil","i","push","selectPage","q","ind","createPagination","Header","uri","location","href","origin","navTo","QuizView","selectCategory","quizCategory","getNextQuestion","previousQuestions","currentQuestion","previous_questions","quiz_category","showAnswer","guess","forceEnd","submitGuess","replace","toLowerCase","evaluate","evaluateAnswer","numCorrect","restartGame","formatGuess","split","includes","length","renderFinalScore","renderCorrectAnswer","renderPlay","renderPrePlay","App","path","exact","component","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.25e68cff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from 'react';\r\nimport $ from 'jquery';\r\n\r\nimport '../stylesheets/FormView.css';\r\n\r\nclass FormView extends Component {\r\n  constructor(props){\r\n    super();\r\n    this.state = {\r\n      question: \"\",\r\n      answer: \"\",\r\n      difficulty: 1,\r\n      category: 1,\r\n      categories: {}\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    $.ajax({\r\n      url: `http://127.0.0.1:5000/questions/categories`, //TODO: update request URL\r\n      type: \"GET\",\r\n      success: (result) => {\r\n        this.setState({ categories: result.categories })\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load categories. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  submitQuestion = (event) => {\r\n    event.preventDefault();\r\n    $.ajax({\r\n      url: 'http://127.0.0.1:5000/questions', //TODO: update request URL\r\n      type: \"POST\",\r\n      dataType: 'json',\r\n      contentType: 'application/json',\r\n      data: JSON.stringify({\r\n        question: this.state.question,\r\n        answer: this.state.answer,\r\n        difficulty: this.state.difficulty,\r\n        category: this.state.category\r\n      }),\r\n      xhrFields: {\r\n        withCredentials: true\r\n      },\r\n      crossDomain: true,\r\n      success: (result) => {\r\n        document.getElementById(\"add-question-form\").reset();\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to add question. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({[event.target.name]: event.target.value})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"add-form\">\r\n        <h2>Add a New Trivia Question</h2>\r\n        <form className=\"form-view\" id=\"add-question-form\" onSubmit={this.submitQuestion}>\r\n          <label>\r\n            Question\r\n            <input type=\"text\" name=\"question\" onChange={this.handleChange}/>\r\n          </label>\r\n          <label>\r\n            Answer\r\n            <input type=\"text\" name=\"answer\" onChange={this.handleChange}/>\r\n          </label>\r\n          <label>\r\n            Difficulty\r\n            <select name=\"difficulty\" onChange={this.handleChange}>\r\n              <option value=\"1\">1</option>\r\n              <option value=\"2\">2</option>\r\n              <option value=\"3\">3</option>\r\n              <option value=\"4\">4</option>\r\n              <option value=\"5\">5</option>\r\n            </select>\r\n          </label>\r\n          <label>\r\n            Category\r\n            <select name=\"category\" onChange={this.handleChange}>\r\n              {Object.keys(this.state.categories).map(id => {\r\n                  return (\r\n                    <option key={id} value={id}>{this.state.categories[id]}</option>\r\n                  )\r\n                })}\r\n            </select>\r\n          </label>\r\n          <input type=\"submit\" className=\"button\" value=\"Submit\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FormView;\r\n","import React, { Component } from 'react';\r\nimport '../stylesheets/Question.css';\r\n\r\nclass Question extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      visibleAnswer: false\r\n    }\r\n  }\r\n\r\n  flipVisibility() {\r\n    this.setState({visibleAnswer: !this.state.visibleAnswer});\r\n  }\r\n\r\n  render() {\r\n    const { question, answer, category, difficulty } = this.props;\r\n    return (\r\n      <div className=\"Question-holder\">\r\n        <div className=\"Question\">{question}</div>\r\n        <div className=\"Question-status\">\r\n          <img className=\"category\" src={`${category}.svg`}/>\r\n          <div className=\"difficulty\">Difficulty: {difficulty}</div>\r\n          <img src=\"delete.png\" className=\"delete\" onClick={() => this.props.questionAction('DELETE')}/>\r\n          \r\n        </div>\r\n        <div className=\"show-answer button\"\r\n            onClick={() => this.flipVisibility()}>\r\n            {this.state.visibleAnswer ? 'Hide' : 'Show'} Answer\r\n          </div>\r\n        <div className=\"answer-holder\">\r\n          <span style={{\"visibility\": this.state.visibleAnswer ? 'visible' : 'hidden'}}>Answer: {answer}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Question;\r\n","import React, { Component } from 'react'\r\n\r\nclass Search extends Component {\r\n  state = {\r\n    query: '',\r\n  }\r\n\r\n  getInfo = (event) => {\r\n    event.preventDefault();\r\n    this.props.submitSearch(this.state.query)\r\n  }\r\n\r\n  handleInputChange = () => {\r\n    this.setState({\r\n      query: this.search.value\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.getInfo}>\r\n        <input\r\n          placeholder=\"Search questions...\"\r\n          ref={input => this.search = input}\r\n          onChange={this.handleInputChange}\r\n        />\r\n        <input type=\"submit\" value=\"Submit\" className=\"button\"/>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Search\r\n","import React, { Component } from 'react';\r\n\r\nimport '../stylesheets/App.css';\r\nimport Question from './Question';\r\nimport Search from './Search';\r\nimport $ from 'jquery';\r\n\r\nclass QuestionView extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      questions: [],\r\n      page: 1,\r\n      totalQuestions: 0,\r\n      categories: {},\r\n      currentCategory: null,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getQuestions();\r\n  }\r\n\r\n  getQuestions = () => {\r\n    $.ajax({\r\n      url: `http://127.0.0.1:5000/questions?page=${this.state.page}`, //TODO: update request URL\r\n      type: \"GET\",\r\n      success: (result) => {\r\n        this.setState({\r\n          questions: result.questions,\r\n          totalQuestions: result.total_questions,\r\n          categories: result.categories,\r\n          currentCategory: result.current_category })\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load questions. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n  selectPage(num) {\r\n    this.setState({page: num}, () => this.getQuestions());\r\n  }\r\n\r\n  createPagination(){\r\n    let pageNumbers = [];\r\n    let maxPage = Math.ceil(this.state.totalQuestions / 10)\r\n    for (let i = 1; i <= maxPage; i++) {\r\n      pageNumbers.push(\r\n        <span\r\n          key={i}\r\n          className={`page-num ${i === this.state.page ? 'active' : ''}`}\r\n          onClick={() => {this.selectPage(i)}}>{i}\r\n        </span>)\r\n    }\r\n    return pageNumbers;\r\n  }\r\n\r\n  getByCategory= (id) => {\r\n    $.ajax({\r\n      url: `http://127.0.0.1:5000/categories/${id}/questions`, //TODO: update request URL\r\n      type: \"GET\",\r\n      success: (result) => {\r\n        this.setState({\r\n          questions: result.questions,\r\n          totalQuestions: result.total_questions,\r\n          currentCategory: result.current_category })\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load questions. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n  submitSearch = (searchTerm) => {\r\n    $.ajax({\r\n      url: `http://127.0.0.1:5000/questions/search`, //TODO: update request URL\r\n      type: \"POST\",\r\n      dataType: 'json',\r\n      contentType: 'application/json',\r\n      data: JSON.stringify({searchTerm: searchTerm}),\r\n      xhrFields: {\r\n        withCredentials: true\r\n      },\r\n      crossDomain: true,\r\n      success: (result) => {\r\n        this.setState({\r\n          questions: result.questions,\r\n          totalQuestions: result.total_questions,\r\n          currentCategory: result.current_category })\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load questions. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n  questionAction = (id) => (action) => {\r\n    if(action === 'DELETE') {\r\n      if(window.confirm('are you sure you want to delete the question?')) {\r\n        $.ajax({\r\n          url: `http://127.0.0.1:5000/questions/${id}`, //TODO: update request URL\r\n          type: \"DELETE\",\r\n          success: (result) => {\r\n            this.getQuestions();\r\n          },\r\n          error: (error) => {\r\n            alert('Unable to load questions. Please try your request again')\r\n            return;\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"question-view\">\r\n        <div className=\"categories-list\">\r\n          <h2 onClick={() => {this.getQuestions()}}>Categories</h2>\r\n          <ul>\r\n            {Object.keys(this.state.categories).map((id, ) => (\r\n              \r\n              <li key={id} onClick={() => {this.getByCategory(id)}}>\r\n                {this.state.categories[id]}\r\n                <img className=\"category\" src={`${this.state.categories[id]}.svg`}/>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          <Search submitSearch={this.submitSearch}/>\r\n        </div>\r\n        <div className=\"questions-list\">\r\n          <h2>Questions</h2>\r\n          {this.state.questions.map((q, ind) => (\r\n            <Question\r\n              key={q.id}\r\n              question={q.question}\r\n              answer={q.answer}\r\n              category={this.state.categories[q.category]} \r\n              difficulty={q.difficulty}\r\n              questionAction={this.questionAction(q.id)}\r\n            />\r\n          ))}\r\n          <div className=\"pagination-menu\">\r\n            {this.createPagination()}\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuestionView;\r\n","import React, { Component } from 'react';\r\nimport logo from '../logo.svg';\r\nimport '../stylesheets/Header.css';\r\n\r\nclass Header extends Component {\r\n\r\n  navTo(uri){\r\n    window.location.href = window.location.origin + uri;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App-header\">\r\n        <h1 onClick={() => {this.navTo('')}}>Udacitrivia</h1>\r\n        <h2 onClick={() => {this.navTo('')}}>List</h2>\r\n        <h2 onClick={() => {this.navTo('/add')}}>Add</h2>\r\n        <h2 onClick={() => {this.navTo('/play')}}>Play</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport $ from 'jquery';\r\n\r\nimport '../stylesheets/QuizView.css';\r\n\r\nconst questionsPerPlay = 5;\r\n\r\nclass QuizView extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      quizCategory: null,\r\n      previousQuestions: [],\r\n      showAnswer: false,\r\n      categories: {},\r\n      numCorrect: 0,\r\n      currentQuestion: {},\r\n      guess: '',\r\n      forceEnd: false\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    $.ajax({\r\n      url: `http://127.0.0.1:5000/categories`, //TODO: update request URL\r\n      type: \"GET\",\r\n      success: (result) => {\r\n        this.setState({ categories: result.categories })\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load categories. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n  selectCategory = ({ type, id = 0 }) => {\r\n    this.setState({ quizCategory: { type, id } }, this.getNextQuestion)\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({ [event.target.name]: event.target.value })\r\n  }\r\n\r\n  getNextQuestion = () => {\r\n    const previousQuestions = [...this.state.previousQuestions]\r\n    if (this.state.currentQuestion.id) { previousQuestions.push(this.state.currentQuestion.id) }\r\n\r\n    $.ajax({\r\n      url: 'http://127.0.0.1:5000/quizzes', //TODO: update request URL\r\n      type: \"POST\",\r\n      dataType: 'json',\r\n      contentType: 'application/json',\r\n      data: JSON.stringify({\r\n        previous_questions: previousQuestions,\r\n        quiz_category: this.state.quizCategory\r\n      }),\r\n      xhrFields: {\r\n        withCredentials: true\r\n      },\r\n      crossDomain: true,\r\n      success: (result) => {\r\n        this.setState({\r\n          showAnswer: false,\r\n          previousQuestions: previousQuestions,\r\n          currentQuestion: result.question,\r\n          guess: '',\r\n          forceEnd: result.question ? false : true\r\n        })\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load question. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n  submitGuess = (event) => {\r\n    event.preventDefault();\r\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase()\r\n    let evaluate = this.evaluateAnswer()\r\n    this.setState({\r\n      numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\r\n      showAnswer: true,\r\n    })\r\n  }\r\n\r\n  restartGame = () => {\r\n    this.setState({\r\n      quizCategory: null,\r\n      previousQuestions: [],\r\n      showAnswer: false,\r\n      numCorrect: 0,\r\n      currentQuestion: {},\r\n      guess: '',\r\n      forceEnd: false\r\n    })\r\n  }\r\n\r\n\r\n  renderPrePlay() {\r\n    return (\r\n      <div className=\"quiz-play-holder\">\r\n        <div className=\"choose-header\">Choose Category</div>\r\n        <div className=\"category-holder\">\r\n          <div className=\"play-category\" onClick={this.selectCategory}>ALL</div>\r\n          {Object.keys(this.state.categories).map(id => {\r\n            return (\r\n              <div\r\n                key={id}\r\n                value={id}\r\n                className=\"play-category\"\r\n                onClick={() => this.selectCategory({ type: this.state.categories[id], id })}>\r\n                {this.state.categories[id]}\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderFinalScore() {\r\n    return (\r\n      <div className=\"quiz-play-holder\">\r\n        <div className=\"final-header\"> Your Final Score is {this.state.numCorrect}</div>\r\n        <div className=\"play-again button\" onClick={this.restartGame}> Play Again? </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  evaluateAnswer = () => {\r\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase()\r\n    const answerArray = this.state.currentQuestion.answer.toLowerCase().split(' ');\r\n    return answerArray.includes(formatGuess)\r\n  }\r\n\r\n  renderCorrectAnswer() {\r\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase()\r\n    let evaluate = this.evaluateAnswer()\r\n    return (\r\n      <div className=\"quiz-play-holder\">\r\n        <div className=\"quiz-question\">{this.state.currentQuestion.question}</div>\r\n        <div className={`${evaluate ? 'correct' : 'wrong'}`}>{evaluate ? \"You were correct!\" : \"You were incorrect\"}</div>\r\n        <div className=\"quiz-answer\">{this.state.currentQuestion.answer}</div>\r\n        <div className=\"next-question button\" onClick={this.getNextQuestion}> Next Question </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderPlay() {\r\n    return this.state.previousQuestions.length === questionsPerPlay || this.state.forceEnd\r\n      ? this.renderFinalScore()\r\n      : this.state.showAnswer\r\n        ? this.renderCorrectAnswer()\r\n        : (\r\n          <div className=\"quiz-play-holder\">\r\n            <div className=\"quiz-question\">{this.state.currentQuestion.question}</div>\r\n            <div> {this.state.categories[this.state.currentQuestion.category]} </div>\r\n            <form onSubmit={this.submitGuess}>\r\n              <input type=\"text\" name=\"guess\" onChange={this.handleChange} />\r\n              <input className=\"submit-guess button\" type=\"submit\" value=\"Submit Answer\" />\r\n            </form>\r\n          </div>\r\n        )\r\n  }\r\n\r\n\r\n  render() {\r\n    return this.state.quizCategory\r\n      ? this.renderPlay()\r\n      : this.renderPrePlay()\r\n  }\r\n}\r\n\r\nexport default QuizView;\r\n","import React, { Component } from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch\r\n} from 'react-router-dom'\r\n\r\n// import logo from './logo.svg';\r\nimport './stylesheets/App.css';\r\nimport FormView from './components/FormView';\r\nimport QuestionView from './components/QuestionView';\r\nimport Header from './components/Header';\r\nimport QuizView from './components/QuizView';\r\n\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n    <div className=\"App\">\r\n      <Header path />\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/\" exact component={QuestionView} />\r\n          <Route path=\"/add\" component={FormView} />\r\n          <Route path=\"/play\" component={QuizView} />\r\n          <Route component={QuestionView} />\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './stylesheets/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n\r\n //\"start\": \"HOST='127.0.0.1' PORT='5000' react-scripts start\",\r\n"],"sourceRoot":""}