{"ast":null,"code":"import _toConsumableArray from\"/media/ahmed/SSD/Advanced_Web_Nanodegree_Udacity/FSND/projects/02_trivia_api/starter/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _defineProperty from\"/media/ahmed/SSD/Advanced_Web_Nanodegree_Udacity/FSND/projects/02_trivia_api/starter/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _classCallCheck from\"/media/ahmed/SSD/Advanced_Web_Nanodegree_Udacity/FSND/projects/02_trivia_api/starter/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/media/ahmed/SSD/Advanced_Web_Nanodegree_Udacity/FSND/projects/02_trivia_api/starter/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/media/ahmed/SSD/Advanced_Web_Nanodegree_Udacity/FSND/projects/02_trivia_api/starter/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/media/ahmed/SSD/Advanced_Web_Nanodegree_Udacity/FSND/projects/02_trivia_api/starter/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import $ from'jquery';import'../stylesheets/QuizView.css';var questionsPerPlay=5;var QuizView=/*#__PURE__*/function(_Component){_inherits(QuizView,_Component);var _super=_createSuper(QuizView);function QuizView(props){var _this;_classCallCheck(this,QuizView);_this=_super.call(this);_this.selectCategory=function(_ref){var type=_ref.type,_ref$id=_ref.id,id=_ref$id===void 0?0:_ref$id;_this.setState({quizCategory:{type:type,id:id}},_this.getNextQuestion);};_this.handleChange=function(event){_this.setState(_defineProperty({},event.target.name,event.target.value));};_this.getNextQuestion=function(){var previousQuestions=_toConsumableArray(_this.state.previousQuestions);if(_this.state.currentQuestion.id){previousQuestions.push(_this.state.currentQuestion.id);}$.ajax({url:'http://127.0.0.1:5000/quizzes',//TODO: update request URL\ntype:\"POST\",dataType:'json',contentType:'application/json',data:JSON.stringify({previous_questions:previousQuestions,quiz_category:_this.state.quizCategory}),xhrFields:{withCredentials:true},crossDomain:true,success:function success(result){_this.setState({showAnswer:false,previousQuestions:previousQuestions,currentQuestion:result.question,guess:'',forceEnd:result.question?false:true});return;},error:function error(_error){alert('Unable to load question. Please try your request again');return;}});};_this.submitGuess=function(event){event.preventDefault();var formatGuess=_this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase();var evaluate=_this.evaluateAnswer();_this.setState({numCorrect:!evaluate?_this.state.numCorrect:_this.state.numCorrect+1,showAnswer:true});};_this.restartGame=function(){_this.setState({quizCategory:null,previousQuestions:[],showAnswer:false,numCorrect:0,currentQuestion:{},guess:'',forceEnd:false});};_this.evaluateAnswer=function(){var formatGuess=_this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase();var answerArray=_this.state.currentQuestion.answer.toLowerCase().split(' ');return answerArray.includes(formatGuess);};_this.state={quizCategory:null,previousQuestions:[],showAnswer:false,categories:{},numCorrect:0,currentQuestion:{},guess:'',forceEnd:false};return _this;}_createClass(QuizView,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;$.ajax({url:\"http://127.0.0.1:5000/categories\",//TODO: update request URL\ntype:\"GET\",success:function success(result){_this2.setState({categories:result.categories});return;},error:function error(_error2){alert('Unable to load categories. Please try your request again');return;}});}},{key:\"renderPrePlay\",value:function renderPrePlay(){var _this3=this;return/*#__PURE__*/React.createElement(\"div\",{className:\"quiz-play-holder\"},/*#__PURE__*/React.createElement(\"div\",{className:\"choose-header\"},\"Choose Category\"),/*#__PURE__*/React.createElement(\"div\",{className:\"category-holder\"},/*#__PURE__*/React.createElement(\"div\",{className:\"play-category\",onClick:this.selectCategory},\"ALL\"),Object.keys(this.state.categories).map(function(id){return/*#__PURE__*/React.createElement(\"div\",{key:id,value:id,className:\"play-category\",onClick:function onClick(){return _this3.selectCategory({type:_this3.state.categories[id],id:id});}},_this3.state.categories[id]);})));}},{key:\"renderFinalScore\",value:function renderFinalScore(){return/*#__PURE__*/React.createElement(\"div\",{className:\"quiz-play-holder\"},/*#__PURE__*/React.createElement(\"div\",{className:\"final-header\"},\" Your Final Score is \",this.state.numCorrect),/*#__PURE__*/React.createElement(\"div\",{className:\"play-again button\",onClick:this.restartGame},\" Play Again? \"));}},{key:\"renderCorrectAnswer\",value:function renderCorrectAnswer(){var formatGuess=this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase();var evaluate=this.evaluateAnswer();return/*#__PURE__*/React.createElement(\"div\",{className:\"quiz-play-holder\"},/*#__PURE__*/React.createElement(\"div\",{className:\"quiz-question\"},this.state.currentQuestion.question),/*#__PURE__*/React.createElement(\"div\",{className:\"\".concat(evaluate?'correct':'wrong')},evaluate?\"You were correct!\":\"You were incorrect\"),/*#__PURE__*/React.createElement(\"div\",{className:\"quiz-answer\"},this.state.currentQuestion.answer),/*#__PURE__*/React.createElement(\"div\",{className:\"next-question button\",onClick:this.getNextQuestion},\" Next Question \"));}},{key:\"renderPlay\",value:function renderPlay(){return this.state.previousQuestions.length===questionsPerPlay||this.state.forceEnd?this.renderFinalScore():this.state.showAnswer?this.renderCorrectAnswer():/*#__PURE__*/React.createElement(\"div\",{className:\"quiz-play-holder\"},/*#__PURE__*/React.createElement(\"div\",{className:\"quiz-question\"},this.state.currentQuestion.question),/*#__PURE__*/React.createElement(\"div\",null,\" \",this.state.categories[this.state.currentQuestion.category],\" \"),/*#__PURE__*/React.createElement(\"form\",{onSubmit:this.submitGuess},/*#__PURE__*/React.createElement(\"input\",{type:\"text\",name:\"guess\",onChange:this.handleChange}),/*#__PURE__*/React.createElement(\"input\",{className:\"submit-guess button\",type:\"submit\",value:\"Submit Answer\"})));}},{key:\"render\",value:function render(){return this.state.quizCategory?this.renderPlay():this.renderPrePlay();}}]);return QuizView;}(Component);export default QuizView;","map":{"version":3,"sources":["/media/ahmed/SSD/Advanced_Web_Nanodegree_Udacity/FSND/projects/02_trivia_api/starter/frontend/src/components/QuizView.js"],"names":["React","Component","$","questionsPerPlay","QuizView","props","selectCategory","type","id","setState","quizCategory","getNextQuestion","handleChange","event","target","name","value","previousQuestions","state","currentQuestion","push","ajax","url","dataType","contentType","data","JSON","stringify","previous_questions","quiz_category","xhrFields","withCredentials","crossDomain","success","result","showAnswer","question","guess","forceEnd","error","alert","submitGuess","preventDefault","formatGuess","replace","toLowerCase","evaluate","evaluateAnswer","numCorrect","restartGame","answerArray","answer","split","includes","categories","Object","keys","map","length","renderFinalScore","renderCorrectAnswer","category","renderPlay","renderPrePlay"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport $ from 'jquery';\r\n\r\nimport '../stylesheets/QuizView.css';\r\n\r\nconst questionsPerPlay = 5;\r\n\r\nclass QuizView extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      quizCategory: null,\r\n      previousQuestions: [],\r\n      showAnswer: false,\r\n      categories: {},\r\n      numCorrect: 0,\r\n      currentQuestion: {},\r\n      guess: '',\r\n      forceEnd: false\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    $.ajax({\r\n      url: `http://127.0.0.1:5000/categories`, //TODO: update request URL\r\n      type: \"GET\",\r\n      success: (result) => {\r\n        this.setState({ categories: result.categories })\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load categories. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n  selectCategory = ({ type, id = 0 }) => {\r\n    this.setState({ quizCategory: { type, id } }, this.getNextQuestion)\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({ [event.target.name]: event.target.value })\r\n  }\r\n\r\n  getNextQuestion = () => {\r\n    const previousQuestions = [...this.state.previousQuestions]\r\n    if (this.state.currentQuestion.id) { previousQuestions.push(this.state.currentQuestion.id) }\r\n\r\n    $.ajax({\r\n      url: 'http://127.0.0.1:5000/quizzes', //TODO: update request URL\r\n      type: \"POST\",\r\n      dataType: 'json',\r\n      contentType: 'application/json',\r\n      data: JSON.stringify({\r\n        previous_questions: previousQuestions,\r\n        quiz_category: this.state.quizCategory\r\n      }),\r\n      xhrFields: {\r\n        withCredentials: true\r\n      },\r\n      crossDomain: true,\r\n      success: (result) => {\r\n        this.setState({\r\n          showAnswer: false,\r\n          previousQuestions: previousQuestions,\r\n          currentQuestion: result.question,\r\n          guess: '',\r\n          forceEnd: result.question ? false : true\r\n        })\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load question. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n  submitGuess = (event) => {\r\n    event.preventDefault();\r\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase()\r\n    let evaluate = this.evaluateAnswer()\r\n    this.setState({\r\n      numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\r\n      showAnswer: true,\r\n    })\r\n  }\r\n\r\n  restartGame = () => {\r\n    this.setState({\r\n      quizCategory: null,\r\n      previousQuestions: [],\r\n      showAnswer: false,\r\n      numCorrect: 0,\r\n      currentQuestion: {},\r\n      guess: '',\r\n      forceEnd: false\r\n    })\r\n  }\r\n\r\n\r\n  renderPrePlay() {\r\n    return (\r\n      <div className=\"quiz-play-holder\">\r\n        <div className=\"choose-header\">Choose Category</div>\r\n        <div className=\"category-holder\">\r\n          <div className=\"play-category\" onClick={this.selectCategory}>ALL</div>\r\n          {Object.keys(this.state.categories).map(id => {\r\n            return (\r\n              <div\r\n                key={id}\r\n                value={id}\r\n                className=\"play-category\"\r\n                onClick={() => this.selectCategory({ type: this.state.categories[id], id })}>\r\n                {this.state.categories[id]}\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderFinalScore() {\r\n    return (\r\n      <div className=\"quiz-play-holder\">\r\n        <div className=\"final-header\"> Your Final Score is {this.state.numCorrect}</div>\r\n        <div className=\"play-again button\" onClick={this.restartGame}> Play Again? </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  evaluateAnswer = () => {\r\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase()\r\n    const answerArray = this.state.currentQuestion.answer.toLowerCase().split(' ');\r\n    return answerArray.includes(formatGuess)\r\n  }\r\n\r\n  renderCorrectAnswer() {\r\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase()\r\n    let evaluate = this.evaluateAnswer()\r\n    return (\r\n      <div className=\"quiz-play-holder\">\r\n        <div className=\"quiz-question\">{this.state.currentQuestion.question}</div>\r\n        <div className={`${evaluate ? 'correct' : 'wrong'}`}>{evaluate ? \"You were correct!\" : \"You were incorrect\"}</div>\r\n        <div className=\"quiz-answer\">{this.state.currentQuestion.answer}</div>\r\n        <div className=\"next-question button\" onClick={this.getNextQuestion}> Next Question </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderPlay() {\r\n    return this.state.previousQuestions.length === questionsPerPlay || this.state.forceEnd\r\n      ? this.renderFinalScore()\r\n      : this.state.showAnswer\r\n        ? this.renderCorrectAnswer()\r\n        : (\r\n          <div className=\"quiz-play-holder\">\r\n            <div className=\"quiz-question\">{this.state.currentQuestion.question}</div>\r\n            <div> {this.state.categories[this.state.currentQuestion.category]} </div>\r\n            <form onSubmit={this.submitGuess}>\r\n              <input type=\"text\" name=\"guess\" onChange={this.handleChange} />\r\n              <input className=\"submit-guess button\" type=\"submit\" value=\"Submit Answer\" />\r\n            </form>\r\n          </div>\r\n        )\r\n  }\r\n\r\n\r\n  render() {\r\n    return this.state.quizCategory\r\n      ? this.renderPlay()\r\n      : this.renderPrePlay()\r\n  }\r\n}\r\n\r\nexport default QuizView;\r\n"]},"metadata":{},"sourceType":"module"}